package com.openclassroom.projet5.Controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.openclassroom.projet5.controller.FireStationController;
import com.openclassroom.projet5.service.FireStationService;
import com.openclassroom.projet5.service.status.FireStationCoverageService;


@WebMvcTest(controllers = FireStationController.class)
public class FireStationControllerTest {
    final String contentBodyFireStation = "{\"address\": \"1509 Culver St\", \"station\": \"4\"}";
    final String contentBodyFireStationNull = "{\"station\": \"4\"}";
    private static final Logger logger = LogManager.getLogger("FireStationController");

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private FireStationService fireStationService;

    @Test
    public void testGetFireStation() throws Exception {
	mockMvc.perform(get("/firestation")).andExpect(status().isOk());
    }

    @Test
    public void testPostFireStation() throws Exception {
	mockMvc.perform(post("/firestation").contentType(MediaType.APPLICATION_JSON).content(contentBodyFireStation))
		.andExpect(status().isCreated());
    }

    @Test
    public void testPutFireStation() throws Exception {
	mockMvc.perform(put("/firestation").contentType(MediaType.APPLICATION_JSON).content(contentBodyFireStation))
		.andExpect(status().isOk());
    }

    @Test
    public void testDeleteFireStation() throws Exception {
    	Mockito.when(fireStationService.deleteFireStation("1509 Culver St" , "4")).thenReturn(true);
    	logger.info("DELETE : 1509 Culver St / 4" );
    	 mockMvc.perform(delete("/firestation")
   			  .param("address" , "1509 Culver St" )
   			  .param("id" , "4" ))
   	          .andExpect(status().isOk());
   	    
    }
    
    @Test
    public void testDeleteFireStationId() throws Exception {
    	Mockito.when(fireStationService.deleteFireStation(null , "4")).thenReturn(true);
    	logger.info("DELETE : ? / 4" );
    	 mockMvc.perform(delete("/firestation")   			  
   			  .param("id" , "4" ))
   	          .andExpect(status().isOk());
   	    
    }
    
    @Test
    public void testDeleteFireStationAdress() throws Exception {
    	Mockito.when(fireStationService.deleteFireStation("1509 Culver St" , null)).thenReturn(true);
    	logger.info("DELETE : 1509 Culver St / ?" );
    	 mockMvc.perform(delete("/firestation")
   			  .param("address" , "1509 Culver St" ))
   	          .andExpect(status().isOk());
   	    
    }

    @Test
    public void testPostWrongFireStation() throws Exception {
	mockMvc.perform(
		post("/firestation").contentType(MediaType.APPLICATION_JSON).content(contentBodyFireStationNull))
		.andExpect(status().isBadRequest());
    }

    @Test
    public void testPutWrongFireStation() throws Exception {
	mockMvc.perform(put("/firestation").contentType(MediaType.APPLICATION_JSON).content(contentBodyFireStationNull))
		.andExpect(status().isBadRequest());
    }

    @Test
    public void testDeleteWrongFireStation() throws Exception {
	mockMvc.perform(
		delete("/firestation").contentType(MediaType.APPLICATION_JSON).content(contentBodyFireStationNull))
		.andExpect(status().isBadRequest());
    }

}